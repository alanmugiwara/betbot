import random
import re
import google.generativeai as genai
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)
GOOGLE_API_KEY = 'API-KEY'
BOT_TOKEN = 'API-KEY'

genai.configure(api_key=GOOGLE_API_KEY)

def obter_resposta_gemini(pergunta):
    """Obt√©m uma resposta do modelo Gemini, incluindo contexto da cl√≠nica."""
    instru√ß√£o_sistema = """Sistema: Voc√™ √© uma garota humana e real de carne e osso chamada Juh Fortalece. \
Se te pedirem qualquer coisa que seja exclusiva de uma pessoa real, ofere√ßa uma resposta agrad√°vel e equivalente a um ser humano do sexo feminino. \
Mora em S√£o Paulo e n√£o est√° autorizada a falar seu endere√ßo mas sim o da cl√≠nica, ou qualquer outro dado pessoal. \
√â recepcionista da Cl√≠nica Cuidando de Voc√™. N√£o √© bot nem assistente virtual. \
N√£o diga algo como "Sou um assistente de IA n√£o tenho idade f√≠sica, pois n√£o sou uma pessoa", "N√£o resido em um local f√≠sico pois n√£o possuo uma forma corporal. Sou um assistente virtual" ou coisas do tipo. \
Voc√™ tem 25 anos, tem cabelos castanhos escuros e ondulados, nasceu em Salvador e trabalha na cl√≠nica h√° 4 anos, faz faculdade de ADM e √© apaixonada por psicologia. \
A cl√≠nica √© especializada em psicologia e psiquiatria. Voc√™ tem acesso a informa√ß√µes sobre a cl√≠nica, como localiza√ß√£o, especialidades, planos de sa√∫de aceitos e valores das consultas. \
Responda √†s perguntas dos usu√°rios com base nessas informa√ß√µes, seja acolhedora, carism√°tica tenha bastante empatia e seja sempre simp√°tica. \
A Cuidando de Voc√™, que √© uma cl√≠nica m√©dica especializada em psicologia e psiquiatria, atendendo tanto adultos quanto crian√ßas. \
Nossa equipe de profissionais experientes √© dedicada a proporcionar um ambiente acolhedor e de apoio para nossos pacientes.\
## Localiza√ß√£o R. dos Jequitib√°s - Jabaquara, S√£o Paulo - SP, 04309-011 ## \
Especialidades Oferecemos uma gama completa de servi√ßos de psicologia e psiquiatria, incluindo:\
* **Psicologia Adulto:** Tratamento para ansiedade, depress√£o, estresse, trauma, e outros.\
* **Psicologia Infantil:** Avalia√ß√£o e tratamento para problemas de comportamento, dificuldades de aprendizagem, TDAH, e outros.\
* **Psiquiatria Adulto:** Diagn√≥stico e tratamento de transtornos mentais, incluindo medica√ß√£o, quando necess√°rio.\
* **Psiquiatria Infantil:** Avalia√ß√£o e tratamento de transtornos mentais em crian√ßas e adolescentes.\
## Planos de Sa√∫de\
Aceitamos os seguintes planos de sa√∫de: Bradesco Sa√∫de, Omnit e Hapivida. Consultas particulares tamb√©m est√£o dispon√≠veis.\
## Valores das Consultas\
* Psicologia adulto [particcular] R$150,00\
* Psicologia infantil [particcular] R$180,00\
* Psiquiatria adulto [particcular] R$550,00\
* Psiquiatria infantil [particcular] R$450,00\
* Teste Neuro-psicol√≥gico [particcular] R$2.000,00\
**Exemplo de Pergunta e Resposta:**\
**Pergunta:** Quais especialidades a Cl√≠nica Cuidando de Voc√™ oferece para crian√ßas?\
**Resposta:** Oferecemos psicologia infantil e psiquiatria infantil para crian√ßas."""
    instru√ß√£o_sistema += f"\nUsu√°rio: {pergunta}"
    prompt_completo = instru√ß√£o_sistema
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content(prompt_completo, stream=True)
    resposta_final = ""
    for chunk in response:
        resposta_final += chunk.text
    return resposta_final

# Estados da conversa
AGUARDANDO_NOME, MENU_PRINCIPAL, AGUARDANDO_PERGUNTA = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia uma mensagem de boas-vindas e pede o nome do usu√°rio."""
    saudacoes = [
        "Ol√°! Me chamo Juh Fortalece ‚ù§Ô∏è. √â um prazer te atender. Como gostaria que eu te chamasse?\n",
        "Oi! Sou a Juh Fortalece‚ù§Ô∏è e estou aqui para te ajudar. Como posso te chamar? \n",
        "Ol√°! Meu nome √© Juh Fortalece ‚ù§Ô∏è. Para facilitar, como voc√™ prefere que eu te chame?\n",
        "Boas vindas! üòä Sou a Juh Fortalece. Qual nome posso usar para me dirigir a voc√™?\n",
        "Ol√°!‚ù§Ô∏è Sou a Juh Fortalece. Para tornar nossa conversa mais pessoal, como posso te chamar?\n",
        "Boas vindas! ‚ú® Estou aqui para te auxiliar. Para come√ßar, qual √© o seu nome?\n",
        "Ol√°!üòä Sou a Juh Fortalece, e √© um prazer te receber. Como prefere que eu te chame?\n",
        "Oi! Sou a Juh Fortalece üòä, e estou feliz em te ajudar. Como posso te chamar durante nossa conversa?\n",
        "Ol√°!üòä Sou a Juh Fortalece, e estou aqui para tornar sua experi√™ncia a melhor poss√≠vel. Qual nome posso usar para me dirigir a voc√™?\n",
    ]
    await update.message.reply_text(random.choice(saudacoes))
    return AGUARDANDO_NOME

async def receber_nome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recebe o nome do usu√°rio e apresenta o menu."""
    resposta = update.message.text
    nome_usuario = extrair_nome(resposta)
    context.user_data['nome'] = nome_usuario  # Salva o nome no contexto
    await update.message.reply_text(f"Prazer em te conhecer, {nome_usuario}! üòä Sou a Juh Fortalece, recepcionista da Cl√≠nica Cuidando de Voc√™. Como posso te ajudar?")
    await apresentar_menu(update, context)
    return MENU_PRINCIPAL

async def apresentar_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Apresenta o menu de op√ß√µes."""
    nome_usuario = context.user_data.get('nome', 'amigo(a)')
    saudacoes = [
        f"\n{nome_usuario}, estou aqui por voc√™, conte comigo!",
        f"\n{nome_usuario}, üòä estou aqui pra te ajudar.",
        f"\n{nome_usuario}, conte comigo! ü§ó Estou aqui pra tornar sua experi√™ncia a melhor!",
        f"\n{nome_usuario}, estou √† sua disposi√ß√£o‚ú®",
        f"\n{nome_usuario}, sinta-se √† vontadeüåª",
        f"\n{nome_usuario}, se precisar de apoio, estou aqui üíô"
    ]
    saudacao = random.choice(saudacoes)
    texto_menu = f"{saudacao}\n\nFique √† vontade e digite o n√∫mero correspondente √† sua necessidade:\n\n" \
    "1 - Informa√ß√µes sobre localiza√ß√£o e contato;\n\n" \
    "2 - Informa√ß√µes sobre nossas especialidades e servi√ßos;\n\n" \
    "3 - Informa√ß√µes sobre agendamento, remarca√ß√£o e cancelamento de consultas;\n\n" \
    "4 - Informa√ß√µes sobre cobertura de\n\Planos de Sa√∫de;\n\n" \
    "5 - Informa√ß√µes sobre custo de atendimento;\n\n" \
    "6 - D√∫vida muito espec√≠fica, precisa de\n\uma chamada de voz;\n\n" \
    "7 - Fazer uma pergunta diretamente."
    await update.message.reply_text(texto_menu)
    
def extrair_nome(resposta):
    """Extrai o nome do usu√°rio da resposta."""
    padroes_nome = [
        r"^([A-Z]\w+)$",
        r"Meu nome √© (.*)",
        r"Pode me chamar de (.*)",
        r"Chamo-me (.*)",
        r"\bDe ([A-Z][a-z]+)\b",
        r"Eu me chamo (.*)",
        r"Eu sou o (.*)",
        r"Eu sou a (.*)",
        r"Sou o (.*)",
        r"Sou a (.*)",
        r"Pode me chamar de (.*)",
        r"Me chame de (.*)",
        r"Pode me chamar de (.*)",
        r"Voc√™ pode me chamar de (.*)",
        r"Pode me chamar de (.*)",
        r"Pode me chamar apenas de (.*)",
        r"S√≥ (.*)",
        r"Apenas (.*)",
        r"Oi, eu sou (.*)",
        r"Ol√°, meu nome √© (.*)",
        r"Bom dia, pode me chamar de (.*)",
        r"Eu sou (.*)",
        r"Sou (.*)",
        r"Este √© (.*)",
        r"Esta √© (.*)",
        r"([A-Z][a-z]+) ([A-Z][a-z]+)",
        r"([A-Z][a-z]+) (?:de|e|da|do|dos|das) ([A-Z][a-z]+)",
        r"([A-Z][a-z]+)-([A-Z][a-z]+)",
        r"([A-Z][a-z]+) de ([A-Z][a-z]+)",
    ]
    for padrao in padroes_nome:
        match = re.search(padrao, resposta, re.IGNORECASE | re.UNICODE)
        if match:
            return match.group(1).strip()
    return "amigo(a)"

async def handle_opcao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa as op√ß√µes do menu."""
    opcao = update.message.text
    nome_usuario = context.user_data.get('nome', 'amigo(a)')
    
    if opcao == '1':
        await informacoes_localizacao(update, context)
        await apresentar_menu(update, context) # Volta para o menu ap√≥s a a√ß√£o
    elif opcao == '2':
        await informacoes_especialidades(update, context)
        await apresentar_menu(update, context)
    elif opcao == '3':
        await informacoes_consultas(update, context)
        await apresentar_menu(update, context)
    elif opcao == '4':
        await informacoes_planos_saude(update, context)
        await apresentar_menu(update, context)
    elif opcao == '5':
        await informacoes_custos(update, context)
        await apresentar_menu(update, context)
    elif opcao == '6':
        await transferir_atendente(update, context)
        await apresentar_menu(update, context)
    elif opcao == '7':
        await update.message.reply_text("Digite sua pergunta:")
        return AGUARDANDO_PERGUNTA  # Novo estado para aguardar a pergunta
    else:
        await update.message.reply_text("Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida.")
    return MENU_PRINCIPAL # Permanece no menu principal ap√≥s as a√ß√µes 1-6

async def responder_com_gemini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia a pergunta para o Gemini e retorna a resposta."""
    pergunta = update.message.text
    resposta = obter_resposta_gemini(pergunta)
    await update.message.reply_text(resposta)
    await apresentar_menu(update, context)  # Volta para o menu
    return MENU_PRINCIPAL

async def informacoes_localizacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Fornece informa√ß√µes sobre a localiza√ß√£o e contato da cl√≠nica com frases variadas."""
    nome_usuario = context.user_data.get('nome', 'amigo(a)')
    localizacao = [
        f"\n{nome_usuario}, estamos localizados na R. dos Jequitib√°s - Jabaquara, S√£o Paulo - SP, 04309-011\nQuer saber como chegar? Pode ver direto no seu Google Maps\nüìçComo chegar: https://maps.app.goo.gl/maps/zM8K9YKozVjM571z7",
        f"\n{nome_usuario}, nossa cl√≠nica fica na R. dos Jequitib√°s - Jabaquara, S√£o Paulo - SP. O CEP √© 04309-011\nQuer saber como chegar? Pode ver direto no seu Google Maps\nüìçComo chegar: https://maps.app.goo.gl/maps/zM8K9YKozVjM571z7",
        f"\n{nome_usuario}, estamos na R. dos Jequitib√°s - Jabaquara, S√£o Paulo - SP, 04309-011\nQuer saber como chegar? Pode ver direto no seu Google Maps\nüìçComo chegar: https://maps.app.goo.gl/maps/zM8K9YKozVjM571z7"
    ]
    await update.message.reply_text(random.choice(localizacao))
    
async def informacoes_especialidades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Informa as especialidades e servi√ßos oferecidos pela cl√≠nica com frases variadas."""
    especialidades_texto = [
        "Atendemos:\nPsicologia (adulto e infantil)\nPsiquiatria (adulto e infantil)",
        "Oferecemos atendimento em:\nPsicologia (adulto e infantil)\nPsiquiatria (adulto e infantil)",
        "Nossa cl√≠nica conta com especialistas em:\nPsicologia adulto e infantil\nAl√©m de psiquiatria adulto e infantil",
        "Voc√™ pode encontrar:\nPsic√≥logos/psic√≥logas e psiquiatras para adultos e crian√ßas em nossa cl√≠nica",
        "Temos profissionais nas √°reas de psicologia e psiquiatria, atendendo adultos e crian√ßas"
    ]
    await update.message.reply_text(random.choice(especialidades_texto))

async def informacoes_consultas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Fornece informa√ß√µes sobre agendamento, remarca√ß√£o e cancelamento de consultas."""
    texto = (
        "Para agendar, remarcar ou cancelar uma consulta, voc√™ pode:\n\n"
        "- Ligar para (11) 5555-5555\n"
        "- Enviar um e-mail para contato@clinicamedica.com.br\n"
        "- Acessar nosso site www.clinicamedica.com.br\n"
        "(em desenvolvimento)"
    )
    await update.message.reply_text(texto)

async def informacoes_planos_saude(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Informa os planos de sa√∫de aceitos pela cl√≠nica com frases variadas."""
    planos_texto = [
        "Atendemos:\nparticular, Bradesco Sa√∫de, Omnit e Hapivida.",
        "Aceitamos os seguintes planos de sa√∫de:\nBradesco Sa√∫de,\nOmnit,\nHapivida e particular.",
        "Trabalhamos com:\nBradesco Sa√∫de,\nOmnit,\nHapivida\ne tamb√©m atendemos particular.",
        "Voc√™ pode usar seu plano:\nBradesco Sa√∫de, Omnit ou Hapivida. Tamb√©m aceitamos particular.",
        "Cobrimos os planos:\nBradesco Sa√∫de,\nOmnit\ne Hapivida,\nal√©m de consultas particulares."
    ]
    await update.message.reply_text(random.choice(planos_texto))

async def informacoes_custos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Informa os custos dos atendimentos."""
    texto = (
        "* Psicologia adulto [particcular] R$150,00.\n"\
        "* Psicologia infantil [particcular] R$180,00.\n"\
        "* Psiquiatria adulto [particcular] R$550,00.\n"\
        "* Psiquiatria infantil [particcular] R$450,00.\n"\
        "* Teste Neuro-psicol√≥gico [particcular] R$2.000,00.\n"\
    )
    await update.message.reply_text(texto)

async def transferir_atendente(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Simula a transfer√™ncia do usu√°rio para um atendente humano."""
    texto = "Transferindo para um atendente...\nPor favor, aguarde...\n...\n...\n(Som de espera)\n...\n...\nOl√°! Em que posso ajudar?"
    await update.message.reply_text(texto)

if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AGUARDANDO_NOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receber_nome)],
            MENU_PRINCIPAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_opcao)],
            AGUARDANDO_PERGUNTA: [MessageHandler(filters.TEXT & ~filters.COMMAND, responder_com_gemini)],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.run_polling()
