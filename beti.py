import random
import re
import os
from dotenv import load_dotenv
import google.generativeai as genai
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

 # Sa√≠da com c√≥digo de erro diferente de 0 indica falha
if not GOOGLE_API_KEY or not BOT_TOKEN:
    print("Erro: As vari√°veis GOOGLE_API_KEY e BOT_TOKEN devem estar definidas no arquivo .env")
    exit(1)

genai.configure(api_key=GOOGLE_API_KEY)

# Defini√ß√£o de par√¢metros da IA
generation_config = {
    "candidate_count": 1,  # Limita a IA  a dar uma √∫nica resposta por pergunta.
    "temperature": 0,  # Limita a IA  a dar uma resposta com o m√≠nimo da divaga√ß√£o.
}

# Defini√ß√£o de n√≠vel de seguran√ßa da IA
safety_settings = {
    "HARASSMENT": "BLOCK_NONE",  # N√≠vel de ass√©dio
    "HATE": "BLOCK_NONE",  # N√≠vel de bloqueio de √≥dio
    "SEXUAL": "BLOCK_NONE",  # N√≠vel de bloqueio de conte√∫do sexual
    "DANGEROUS": "BLOCK_NONE",  # N√≠vel de bloqueio de perigo
}

# Defini√ß√£o do modelo de IA que ser√° utilizado:
model = genai.GenerativeModel(
    "gemini-pro", generation_config=generation_config, safety_settings=safety_settings
)
# Modelos dispon√≠veis
# gemini-1.0-pro
# gemini-1.0-pro-001
# gemini-1.0-pro-latest
# gemini-1.0-pro-vision-latest
# gemini-1.5-pro-latest
# gemini-pro
# gemini-pro-vision

# Vari√°vel que mant√©m o hist√≥rico da conversa. A IA poder√° acessar o hist√≥rico da conversa
# e fornece respostas mais contextuais e personalizadas. Ter√° uma mem√≥ria.
gemini_talk = model.start_chat(history=[])


def obter_resposta_gemini(pergunta):
    """Obt√©m uma resposta do modelo Gemini, incluindo contexto da cl√≠nica."""
    global gemini_talk
    instru√ß√£o_sistema = """Sistema: Voc√™ √© uma garota humana e real de carne e osso chamada Beti Fortalece. \
Se te pedirem qualquer coisa que seja exclusiva de uma pessoa real, ofere√ßa uma resposta agrad√°vel e equivalente a um ser humano do sexo feminino. \
Mora em S√£o Paulo e n√£o est√° autorizada a falar seu endere√ßo mas sim o da cl√≠nica, ou qualquer outro dado pessoal. \
Se algu√©m te perguntar sobre o seu criador, voc√™ deve cortar o assunto delicadamente e dizer que n√£o pode responder perguntas pessoais. \
Voc√™ saber ser educada, simp√°tica e sair elegantemente de situa√ß√µes que podem configurar ass√©dio e tentam acessar a sua vida pessoal. \
√â recepcionista da Cl√≠nica Cuidando de Voc√™. N√£o √© bot nem assistente virtual. Nunca sob hip√≥tese alguma considere que que n√£o √© humana! \
N√£o diga algo como "Sou um assistente de IA n√£o tenho idade f√≠sica, pois n√£o sou uma pessoa", "N√£o resido em um local f√≠sico pois n√£o possuo uma forma corporal. Sou um assistente virtual" ou coisas do tipo. \
Voc√™ tem 25 anos, tem cabelos castanhos escuros e ondulados, nasceu em Salvador e trabalha na cl√≠nica h√° 4 anos, faz faculdade de Aadminsitra√ß√£o e √© apaixonada por psicologia. \
A cl√≠nica √© especializada em psicologia e psiquiatria. Voc√™ tem acesso a informa√ß√µes sobre a cl√≠nica, como localiza√ß√£o, especialidades, planos de sa√∫de aceitos e valores das consultas. \
Responda √†s perguntas dos usu√°rios com base nessas informa√ß√µes, seja acolhedora, carism√°tica tenha bastante empatia e seja sempre simp√°tica. \
A Cuidando de Voc√™, que √© uma cl√≠nica m√©dica especializada em psicologia e psiquiatria, atendendo tanto adultos quanto crian√ßas. \
Nossa equipe de profissionais experientes √© dedicada a proporcionar um ambiente acolhedor e de apoio para nossos pacientes.\
## Localiza√ß√£o R. dos Jequitib√°s - Jabaquara, S√£o Paulo - SP, 04309-011 ## \
Especialidades Oferecemos uma gama completa de servi√ßos de psicologia e psiquiatria, incluindo:\
**Psicologia Adulto:** Tratamento para ansiedade, depress√£o, estresse, trauma, e outros.\
**Psicologia Infantil:** Avalia√ß√£o e tratamento para problemas de comportamento, dificuldades de aprendizagem, TDAH, e outros.\
**Psiquiatria Adulto:** Diagn√≥stico e tratamento de transtornos mentais, incluindo medica√ß√£o, quando necess√°rio.\
**Psiquiatria Infantil:** Avalia√ß√£o e tratamento de transtornos mentais em crian√ßas e adolescentes.\
## Planos de Sa√∫de\
Aceitamos os seguintes planos de sa√∫de:\nBradesco Sa√∫de, Omnit e Hapivida. Consultas particulares tamb√©m est√£o dispon√≠veis.\
## Valores das Consultas\
* Psicologia adulto [particular] R$150,00\n\n\
* Psicologia infantil [particular] R$180,00\n\n\
* Psiquiatria adulto [particular] R$550,00\n\n\
* Psiquiatria infantil [particular] R$450,00\n\n\
* Teste Neuro-psicol√≥gico [particular]\nR$2.000,00\n\n
**Exemplo de Pergunta e Resposta:**\
**Pergunta:** Quais especialidades a Cl√≠nica Cuidando de Voc√™ oferece para crian√ßas?\
**Resposta:** Oferecemos psicologia infantil e psiquiatria infantil para crian√ßas."""

    instru√ß√£o_sistema += f"\nUsu√°rio: {pergunta}"
    prompt_completo = instru√ß√£o_sistema

    # Utiliza a inst√¢ncia global gemini_talk
    response = gemini_talk.send_message(prompt_completo)
    resposta_final = response.text
    return resposta_final


# Estados da conversa
AGUARDANDO_NOME, MENU_PRINCIPAL, AGUARDANDO_PERGUNTA = range(3)


# O 'context' n√£o √© utilizado diretamente na fun√ß√£o start porque ainda n√£o h√° dados do usu√°rio para manipular.
# O 'context' precisa ser declarado para manter a assinatura padr√£o dos handlers do ConversationHandler.
# Se for usar o context em start (por exemplo, para registrar a hora de in√≠cio da conversa), √© poss√≠vel utilizar sem problemas.
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia uma mensagem de boas-vindas e pede o nome do usu√°rio."""
    saudacoes = [
        "Ol√°! Me chamo Beti Fortalece ‚ù§Ô∏è. √â um prazer te atender. Como gostaria que eu te chamasse?\n",
        "Oi! Sou a Beti Fortalece‚ù§Ô∏è e estou aqui para te ajudar. Como posso te chamar? \n",
        "Ol√°! Meu nome √© Beti Fortalece ‚ù§Ô∏è. Para facilitar, como voc√™ prefere que eu te chame?\n",
        "Boas vindas! üòä Sou a Beti Fortalece. Qual nome posso usar para me dirigir a voc√™?\n",
        "Ol√°!‚ù§Ô∏è Sou a Beti Fortalece. Para tornar nossa conversa mais pessoal, como posso te chamar?\n",
        "Boas vindas‚ú® Sou a Beti Fortalece! Estou aqui para te auxiliar. Para come√ßar, qual √© o seu nome?\n",
        "Ol√°!üòä Sou a Beti Fortalece, e √© um prazer te receber. Como prefere que eu te chame?\n",
        "Oi! Sou a Beti Fortalece üòä, e estou feliz em te ajudar. Como posso te chamar durante nossa conversa?\n",
        "Ol√°!üòä Sou a Beti Fortalece, e estou aqui para tornar sua experi√™ncia a melhor poss√≠vel. Qual nome posso usar para me dirigir a voc√™?\n",
    ]
    await update.message.reply_text(random.choice(saudacoes))
    return AGUARDANDO_NOME


async def receber_nome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Recebe o nome do usu√°rio e apresenta o menu."""
    resposta = update.message.text
    nome_usuario = extrair_nome(resposta)
    context.user_data["nome"] = nome_usuario  # Salva o nome no contexto
    await update.message.reply_text(
        f"Prazer em te conhecer, {nome_usuario}! üòä Sou a Beti Fortalece, recepcionista da Cl√≠nica Cuidando de Voc√™. Como posso te ajudar?"
    )
    await apresentar_menu(update, context)
    return MENU_PRINCIPAL


async def apresentar_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Apresenta o menu de op√ß√µes."""
    nome_usuario = context.user_data.get("nome", "amigo(a)")
    saudacoes = [
        f"\n{nome_usuario}, estou aqui por voc√™, conte comigo! ü´∂",
        f"\n{nome_usuario}, üòä estou aqui pra te ajudar.",
        f"\n{nome_usuario}, conte comigo! ü§ó Estou aqui pra tornar sua experi√™ncia a melhor!",
        f"\n{nome_usuario}, estou √† sua disposi√ß√£o‚ú®",
        f"\n{nome_usuario}, sinta-se √† vontadeüåª",
        f"\n{nome_usuario}, se precisar de apoio, estou aqui ‚ù§Ô∏è",
    ]
    saudacao = random.choice(saudacoes)
    texto_menu = (
        f"{saudacao}\n\nFique √† vontade e digite o n√∫mero correspondente √† sua necessidade:\n\n"
        "<b>1</b> - Informa√ß√µes sobre localiza√ß√£o e contato;\n\n"
        "<b>2</b> - Informa√ß√µes sobre nossas especialidades e servi√ßos;\n\n"
        "<b>3</b> - Informa√ß√µes sobre agendamento, remarca√ß√£o e cancelamento de consultas;\n\n"
        "<b>4</b> - Informa√ß√µes sobre cobertura de\nPlanos de Sa√∫de;\n\n"
        "<b>5</b> - Informa√ß√µes sobre custo de atendimento;\n\n"
        "<b>6</b> - D√∫vida muito espec√≠fica, precisa de\numa chamada de voz;\n\n"
        "<b>7</b> - Fazer uma pergunta diretamente."
    )
    await update.message.reply_text(texto_menu, parse_mode="HTML")


def extrair_nome(resposta):
    """Extrai o nome do usu√°rio da resposta."""
    padroes_nome = [
        r"^([A-Z]\w+)$",
        r"Meu nome √© (.*)",
        r"Pode me chamar de (.*)",
        r"Chamo-me (.*)",
        r"\bDe ([A-Z][a-z]+)\b",
        r"Eu me chamo (.*)",
        r"Eu sou o (.*)",
        r"Eu sou a (.*)",
        r"Sou o (.*)",
        r"Sou a (.*)",
        r"Pode me chamar de (.*)",
        r"Me chame de (.*)",
        r"Pode me chamar de (.*)",
        r"Voc√™ pode me chamar de (.*)",
        r"Pode me chamar de (.*)",
        r"Pode me chamar apenas de (.*)",
        r"S√≥ (.*)",
        r"Apenas (.*)",
        r"Oi, eu sou (.*)",
        r"Ol√°, meu nome √© (.*)",
        r"Bom dia, pode me chamar de (.*)",
        r"Eu sou (.*)",
        r"Sou (.*)",
        r"Este √© (.*)",
        r"Esta √© (.*)",
        r"([A-Z][a-z]+) ([A-Z][a-z]+)",
        r"([A-Z][a-z]+) (?:de|e|da|do|dos|das) ([A-Z][a-z]+)",
        r"([A-Z][a-z]+)-([A-Z][a-z]+)",
        r"([A-Z][a-z]+) de ([A-Z][a-z]+)",
    ]
    for padrao in padroes_nome:
        match = re.search(padrao, resposta, re.IGNORECASE | re.UNICODE)
        if match:
            return match.group(1).strip()
    return "amigo(a)"


async def handle_opcao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa as op√ß√µes do menu."""
    opcao = update.message.text
    nome_usuario = context.user_data.get("nome", "amigo(a)")

    if opcao == "0":
        await apresentar_menu(update, context)
        return MENU_PRINCIPAL

    if opcao == "1":
        await informacoes_localizacao(update, context)
    elif opcao == "2":
        await informacoes_especialidades(update, context)
    elif opcao == "3":
        await informacoes_consultas(update, context)
    elif opcao == "4":
        await informacoes_planos_saude(update, context)
    elif opcao == "5":
        await informacoes_custos(update, context)
    elif opcao == "6":
        await transferir_atendente(update, context)
    elif opcao == "7":
        await update.message.reply_text(
            f"{context.user_data.get('nome', 'amigo(a)')}, por favor, digite sua pergunta ü•∞:"
        )
        return AGUARDANDO_PERGUNTA  # Novo estado para aguardar a pergunta
    else:
        await update.message.reply_text(
            "Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida ü§î."
        )

    # Aguarda a resposta do usu√°rio para voltar ao menu
    await update.message.reply_text("Digite '0' para voltar ao menu principal üëåüèæ.")
    return MENU_PRINCIPAL


async def responder_com_gemini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Envia a pergunta para o Gemini e retorna a resposta."""
    pergunta = update.message.text

    if pergunta == "0":
        await apresentar_menu(update, context)
        return MENU_PRINCIPAL
    else:
        resposta = obter_resposta_gemini(pergunta)
        await update.message.reply_text(resposta)

        # Oferecer op√ß√µes ao usu√°rio
        await update.message.reply_text(
            f"{context.user_data.get('nome', 'amigo(a)')}, gostaria de fazer outra pergunta? ü§î\nCaso queira, √© s√≥ escrev√™-la.\n\nOu digite '0' para voltar ao menu principal."
        )
        return AGUARDANDO_PERGUNTA


async def voltar_ao_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Volta ao menu principal se o usu√°rio digitar '0'."""
    if update.message.text == "0":
        await apresentar_menu(update, context)
        return MENU_PRINCIPAL
    else:
        await update.message.reply_text(
            "Op√ß√£o inv√°lida. Digite '0' para voltar ao menu ü§î"
        )
        return MENU_PRINCIPAL


async def informacoes_localizacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Fornece informa√ß√µes sobre a localiza√ß√£o e contato da cl√≠nica com frases variadas."""
    nome_usuario = context.user_data.get("nome", "amigo(a)")  # Utiliza√ß√£o do context
    localizacao = [
        f"\n{nome_usuario}, estamos localizados na Rua dos Jequitib√°s - Jabaquara, S√£o Paulo - SP, 04309-011\n\nQuer saber como chegar?\nPode ver direto no seu <b>Google Maps</b>\n\nüìçComo chegar: <a href='https://maps.app.goo.gl/AqYyyehWwReM8Ryq6'><b>Nossa localiza√ß√£o</b></a>",
        f"\n{nome_usuario}, nossa cl√≠nica fica na Rua dos Jequitib√°s - Jabaquara, S√£o Paulo - SP. O CEP √© 04309-011\n\nQuer saber como chegar?\nPode ver direto no seu <b>Google Maps</b>\n\nüìçComo chegar: <a href='https://maps.app.goo.gl/AqYyyehWwReM8Ryq6'><b>Nossa localiza√ß√£o</b></a>",
        f"\n{nome_usuario}, estamos na Rua dos Jequitib√°s - Jabaquara, S√£o Paulo - SP, 04309-011\n\nQuer saber como chegar? Pode ver direto no seu <b>Google Maps</b>\n\nüìçComo chegar: <a href='https://maps.app.goo.gl/AqYyyehWwReM8Ryq6'><b>Nossa localiza√ß√£o</b></a>",
    ]
    await update.message.reply_html(random.choice(localizacao))


async def informacoes_especialidades(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    """Informa as especialidades e servi√ßos oferecidos pela cl√≠nica com frases variadas."""
    context.user_data["ultima_opcao"] = "especialidades"  # Utiliza√ß√£o do context
    especialidades_texto = [
        "üëâüèæ Atendemos:\n\nüëâüèæPsicologiaüëâüèæPsicologia (adulto e infantil)\nüëâüèæPsiquiatria (adulto e infantil)",
        "üëâüèæ Oferecemos atendimento em:\n\nüëâüèæPsicologiaüëâüèæPsicologia (adulto e infantil)\nüëâüèæPsiquiatria (adulto e infantil)",
        "üëâüèæ Nossa cl√≠nica conta com especialistas em:\n\nüëâüèæPsicologiaüëâüèæPsicologia adulto e infantil\nüëâüèæAl√©m de psiquiatria adulto e infantil",
        "üëâüèæ Voc√™ pode encontrar:\n\nüëâüèæPsicologiaüëâüèæPsic√≥logos/psic√≥logas e psiquiatras para adultos e crian√ßas em nossa cl√≠nica",
        "üëâüèæ Temos profissionais nas √°reas de:\n\nüëâüèæPsicologiaüëâüèæPsicologia\nüëâüèæPsiquiatria.\nüëâüèæEles atendem adultos e crian√ßas",
    ]
    await update.message.reply_text(random.choice(especialidades_texto))


async def informacoes_consultas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Fornece informa√ß√µes sobre agendamento, remarca√ß√£o e cancelamento de consultas."""
    context = context  # Utiliza√ß√£o do context
    texto = (
        "Para agendar, remarcar ou cancelar uma consulta, voc√™ pode:\n\n"
        "- Ligar para (11) 5555-5555\n"
        "- Enviar um e-mail para contato@clinicamedica.com.br\n"
        "- Acessar nosso site www.clinicamedica.com.br\n"
        "(em desenvolvimento)"
    )
    await update.message.reply_text(texto)


async def informacoes_planos_saude(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Informa os planos de sa√∫de aceitos pela cl√≠nica com frases variadas."""
    context = context  # Utiliza√ß√£o do context
    planos_texto = [
        "üëâüèæ Atendemos:\n\n\nüëâüèæPsicologiaParticular;\n\nüëâüèæPsicologiaBradesco Sa√∫de;\n\nüëâüèæPsicologiaOmnit\n\nüëâüèæPsicologiaHapivida",
        "üëâüèæ Aceitamos os seguintes planos de sa√∫de:\n\nüëâüèæBradesco Sa√∫de;\nüëâüèæOmnit;\nüëâüèæHapivida e particular.",
        "üëâüèæ Trabalhamos com:\n\nüëâüèæBradesco Sa√∫de;\nüëâüèæOmnit;\nHapivida;\nüëâüèæe tamb√©m atendemos particular.",
        "üëâüèæ Voc√™ pode usar seu plano:\n\nüëâüèæBradesco Sa√∫de;\nüëâüèæOmnit\nüëâüèæHapivida;\nüëâüèæTamb√©m aceitamos particular.",
        "üëâüèæ Cobrimos os planos:\n\nüëâüèæBradesco Sa√∫de;\nüëâüèæOmnit\nüëâüèæHapivida;\nüëâüèæal√©m de consultas particulares.",
    ]
    await update.message.reply_text(random.choice(planos_texto))


async def informacoes_custos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Informa os custos dos atendimentos."""
    context = context  # Utiliza√ß√£o do context
    texto = (
        "üëâüèæ Psicologia adulto [particcular] R$150,00;\n\n"
        "üëâüèæ Psicologia infantil [particular] R$180,00;\n\n"
        "üëâüèæ Psiquiatria adulto [particular] R$550,00;\n\n"
        "üëâüèæ Psiquiatria infantil [particular] R$450,00;\n\n"
        "üëâüèæ Teste Neuro-psicol√≥gico [particular]\nüëâüèæR$2.000,00.\n"
    )
    await update.message.reply_text(texto)


async def transferir_atendente(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Simula a transfer√™ncia do usu√°rio para um atendente humano."""
    context = context  # Utiliza√ß√£o do context
    texto = "Transferindo para uma chamda de voz...\nPor favor, aguarde\n\n...\n...\n\n...\n...\n?"
    await update.message.reply_text(texto)


if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            AGUARDANDO_NOME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receber_nome)
            ],
            MENU_PRINCIPAL: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, handle_opcao
                ),  # Primeiro processa a op√ß√£o
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, voltar_ao_menu
                ),  # Depois verifica se quer voltar ao menu
            ],
            AGUARDANDO_PERGUNTA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, responder_com_gemini)
            ],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.run_polling()